[
    {
      "title": "This Website",
      "description": "A React.JS website hosted using Cloudflare Pages. Click into this project to find out more!", 
      "detailsDescription": ["This website was built with React and TypeScript and is hosted using Cloudflare Pages. Some features include:<li>Dynamic display based on screen size. Try going mobile!</li><li>Dynamic projects, project pages, and about me information. All information is pulled from a JSON file and the HTML is generated during rendering.</li><li>Makes use of gh-pages, react-router-dom and react-collapsible packages.</li>"],
      "link": "https://github.com/Neeblue/reactwebsite",
      "image": "/images/website-cover.png",
      "detailsImage": [""],
      "keyword": "website",
      "hidden": "false"
    },
    {
      "title": "Bookshelf Mobile App",
      "description": "A C# AvaloniaUI mobile application that keeps track of books you want to read. Uses a Google Books API to find book descriptions, and scrapes Goodreads for a book image and rating using HtmlAgilityPack. Book details are stored using Firebase. This project uses MVVM with help from the .Net Community toolkit, and uses Microsoft's DI container to inject dependencies.",
      "detailsDescription": ["<h2 style='text-align: center'> What is the Bookshelf app?</h2><br>A .Net MAUI variant of the Librarian project. This is a follow-along/modification of <a href='https://www.youtube.com/watch?v=DuNLR_NJv8U&pp=ygUYamFtZXMgbW9udGVtYWdubyBtb25rZXlz'>James Montemagno's Monkeys project</a>.<br></br>This app has been tested on Windows and Android. It has a different display of the book details depending on the platform.  Books can be added with a search function. This app uses the Google API and the HtmlAgility package to scrape a book image and rating from Goodreads. <br></br>Tapping on one of the books brings up a larger image with additional information (such as a description, rating, publisher info etc.). Books can be deleted by swiping the book to the left.<br></br>Additional features that are implemented:<li>MVVM with dependency injection</li><li>uses .Net Community Toolkit 8.1</li><li>Files are stored in the cloud using Firebase (Firesharp package)</li>","<h2 style='text-align: center'>Details about each book</h2><br>Clicking on one of the books will bring you to a detailed page of the book.<br></br>On android, the information is displayed below the image to better fit the size of a phone screen.<br></br>Information that is displayed includes:<li>An image and rating pulled from Goodreads</li><li>Page count</li><li>Description</li><li>Publisher information</li><li>ISBN 10/13</li>"],
      "link": "https://github.com/Neeblue/Bookshelf",
      "image": "/images/bookshelf-cover.jpg",
      "detailsImage": ["/images/bookshelf/detailsImage1.jpg", "/images/bookshelf/detailsImage2.jpg"],
      "keyword": "bookshelf",
      "hidden": "false"
    },
    {
      "title": "Librarian WPF App",
      "description": "A WPF application that displays books. The image sizes can be changed with a slider. Books are stored locally. This project follows MVVM practices.",
      "detailsDescription": ["<h2>What is the Librarian app?</h2><br>WPF program built in C# that allows you to add books to a display by using the Google search API.<br><br>Books that are added are displayed by image. Hovering over the image will give a description of the book. Books can be right-clicked and deleted.<br><br>The UI can be scaled using a slider, and the books re-organise when the window changes size.<br><br>Additional features that are implemented:<li>MVVM with a service locator</li><li>uses .Net Community Toolkit 8.1</li><li>Uses AvaloniaUI</li><li>Data is stored locally</li>"],
      "link": "https://github.com/Neeblue/Librarian",
      "image": "/images/librarian-cover.jpg",
      "detailsImage": ["/images/librarian/detailsImage.gif"],
      "keyword": "librarian",
      "hidden": "false"
    },
    {
      "title": "Teaching App",
      "description": "Primarily a backend ASP.NET API that pulls information from a jobs database for teachers. Uses Selenium to scrape information (requires authentication). Jobs are stored in objects and returned to the client as JSON. The app uses the Selenium package to scrape data from a database containing available work for teachers-on-call. The data is parsed into an object, and displayed on a UI (.Net MAUI, WPF, Avalonia UI). The app can also displays alerts on Windows and sends a text message to my phone when new jobs are found that match various filters (such as specific schools and subjects). This app helped me find work as a substitute teacher.",
      "detailsDescription": [],
      "link": "https://github.com/Neeblue/TTOCApi",
      "image": "/images/JobFinder-cover.jpg",
      "detailsImage": [""],
      "keyword": "teaching",
      "hidden": "false"
    },
    {
      "title": "Test application",
      "description": "This is a test description",
      "detailsDescription": ["Paragraph 1", "Paragraph 2"],
      "link": "https://github.com/Neeblue/",
      "image": "https://images.twinkl.co.uk/tw1n/image/private/t_630/u/ux/dragon-img_ver_1.jpg",
      "detailsImage": ["https://img.freepik.com/free-photo/dragons-fantasy-artificial-intelligence-image_23-2150400884.jpg",
      "https://static.wikia.nocookie.net/monster/images/3/3c/68185247-BAAD-4E7C-BA78-C2C72761CBDA.jpeg/revision/latest?cb=20190406202034"],
      "keyword": "test",
      "hidden": "true"
    }
]